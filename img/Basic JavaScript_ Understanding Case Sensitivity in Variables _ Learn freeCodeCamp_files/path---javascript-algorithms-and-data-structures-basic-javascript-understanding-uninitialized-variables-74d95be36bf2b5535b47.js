webpackJsonp([0xce3842d9d8c1],{3915:function(e,a){e.exports={data:{challengeNode:{title:"Understanding Uninitialized Variables",description:['When JavaScript variables are declared, they have an initial value of <code>undefined</code>. If you do a mathematical operation on an <code>undefined</code> variable your result will be <code>NaN</code> which means <dfn>"Not a Number"</dfn>. If you concatenate a string with an <code>undefined</code> variable, you will get a literal <dfn>string</dfn> of <code>"undefined"</code>.',"<hr>",'Initialize the three variables <code>a</code>, <code>b</code>, and <code>c</code> with <code>5</code>, <code>10</code>, and <code>"I am a"</code> respectively so that they will not be <code>undefined</code>.'],challengeType:1,videoUrl:null,fields:{slug:"/javascript-algorithms-and-data-structures/basic-javascript/understanding-uninitialized-variables",blockName:"Basic JavaScript",tests:[{text:"<code>a</code> should be defined and evaluated to have the value of <code>6</code>",testString:"assert(typeof a === 'number' && a === 6, '<code>a</code> should be defined and evaluated to have the value of <code>6</code>');"},{text:"<code>b</code> should be defined and evaluated to have the value of <code>15</code>",testString:"assert(typeof b === 'number' && b === 15, '<code>b</code> should be defined and evaluated to have the value of <code>15</code>');"},{text:'<code>c</code> should not contain <code>undefined</code> and should have a value of "I am a String!"',testString:'assert(!/undefined/.test(c) && c === "I am a String!", \'<code>c</code> should not contain <code>undefined</code> and should have a value of "I am a String!"\');'},{text:"Do not change code below the line",testString:"assert(/a = a \\+ 1;/.test(code) && /b = b \\+ 5;/.test(code) && /c = c \\+ \" String!\";/.test(code), 'Do not change code below the line');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:'// Initialize these three variables\nvar a;\nvar b;\nvar c;\n\n// Do not change code below this line\n\na = a + 1;\nb = b + 5;\nc = c + " String!";\n',head:"",tail:'(function(a,b,c){ return "a = " + a + ", b = " + b + ", c = \'" + c + "\'"; })(a,b,c);'},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/basic-javascript/understanding-case-sensitivity-in-variables",id:"56533eb9ac21ba0edf2244aa"},slug:"/javascript-algorithms-and-data-structures/basic-javascript/understanding-uninitialized-variables"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-basic-javascript-understanding-uninitialized-variables-74d95be36bf2b5535b47.js.map